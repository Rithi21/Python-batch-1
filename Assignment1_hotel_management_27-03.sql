create database Hotel_Management_System 
use Hotel_Management_System 

create table Hotels(HotelID int Primary Key,Name varchar(100) NOT NULL,Location varchar(75) NOT NULL,
Rating decimal(2,1) check (Rating >= 1 AND Rating <= 5))

create table Rooms(RoomID int Primary Key,HotelID int,RoomNumber varchar(50),
RoomType varchar(50),PricePerNight decimal(10,2),Available BIT Default 1,
Foreign key (HotelID) REFERENCES Hotels(HotelID))

create table Guests(GuestID int Primary Key,FullName varchar(100),Email varchar(100),
PhoneNumber varchar(20),CheckInDate Date,CheckOutDate Date)

create table Bookings(BookingID int Primary Key,GuestID int,RoomID int,BookingDate datetime,
TotalAmount decimal(10,2),Status VARCHAR(50) NOT NULL CHECK (Status IN ('Confirmed', 'Cancelled', 'Checked Out')),
Foreign Key(GuestId) REFERENCES GUESTS(GuestId),Foreign Key(RoomID ) REFERENCES Rooms(RoomId))

create table Payments(PaymentID int Primary Key,BookingID int,AmountPaid decimal(10,2),PaymentDate datetime,
PaymentMethod varchar(50),Foreign Key (BookingID) REFERENCES Bookings(BookingID))
Create Table Events (
    EventID int PRIMARY Key,HotelID int,EventName varchar(150),EventDate DATETIME,Venue varchar(150),
	Foreign key (HotelID) REFERENCES Hotels(HotelID))

create table EventParticipants (ParticipantID int Primary key,
    ParticipantName varchar(100),ParticipantType VARCHAR(50) check (ParticipantType IN ('Guest', 'Organization')),
    EventID int,Foreign key (EventID) REFERENCES Events(EventID))

-- Insert Data into Hotels Table
Insert into Hotels (HotelID, Name, Location, Rating) VALUES
(1, 'Grand Palace', 'New York', 4.5),
(2, 'Taj Chennai', 'Chennai', 4.9),
(3, 'ITC Grand Chola', 'Chennai', 4.7),
(4, 'Hilton Mumbai', 'Mumbai', 4.6),
(5, 'Leela Palace', 'Bangalore', 4.8);

-- Insert data into Rooms Table
Insert into Rooms (RoomID, HotelID, RoomNumber, RoomType, PricePerNight, Available) VALUES
(1, 1, '101', 'Single', 30.00, 1),
(2, 1, '102', 'Double', 40.00, 0),
(3, 2, '201', 'Suite', 50.00, 1),
(4, 3, '301', 'Single', 35.00, 1),
(5, 4, '401', 'Deluxe', 45.00, 1),
(6, 5, '501', 'Suite', 90.00, 1),
(7, 5, '502', 'Presidential Suite', 180.00, 1)


-- Insert Sample Data into Guests Table
Insert into Guests (GuestID, FullName, Email, PhoneNumber, CheckInDate, CheckOutDate) VALUES
(1, 'Alice Khan', 'alice@gmail.com', '8838065098', '2025-03-23', '2025-03-26'),
(2, 'Anne John', 'john@gmail.com', '8838065341', '2025-03-24', '2025-03-27'),
(3, 'Rahul Kl', 'rahul@gmail.com', '8838065783', '2025-03-25', '2025-03-28'),
(4, 'Virat Kholi', 'virat@gmail.com', '8838065890', '2025-03-26', '2025-03-29')


-- Insert  Data into Bookings Table
Insert into Bookings (BookingID, GuestID, RoomID, BookingDate, TotalAmount, Status) VALUES
(1, 1, 1, '2025-03-21',30.00, 'Confirmed'),
(2, 2, 3, '2025-03-22',35.00, 'Checked Out'),
(3, 3, 5, '2025-03-24',45.00, 'Confirmed'),
(4, 4, 6, '2025-03-26',90.00, 'Cancelled');

INSERT into Payments (PaymentID, BookingID, AmountPaid, PaymentDate, PaymentMethod) VALUES
(1, 1, 30.00, '2025-03-21', 'Credit Card'),
(2, 2, 35.00, '2025-03-23', 'Cash'),
(3, 3, 45.00, '2025-03-26', 'Debit Card'),
(4, 4, 90.00, '2025-03-27', 'UPI')


INSERT INTO Events (EventID, HotelID, EventName, EventDate, Venue) VALUES
(1, 1, 'Business Summit', '2025-04-10', 'Grand Ballroom'),
(2, 2, 'Wedding Expo', '2025-04-15', 'Conference Hall');


-- Insert  Data into EventParticipants Table
INSERT INTO EventParticipants (ParticipantID, ParticipantName, ParticipantType, EventID) VALUES
(1, 'Anne John', 'Organization', 1),
(2, 'Kamal Vijay', 'Guest', 2);
select * from Hotels
select * from Rooms
select * from Guests
select * from Bookings
select * from Payments
select * from Events
select * from EventParticipants

-- 4. Query to Retrieve Available Rooms
select RoomID, HotelID, RoomNumber, RoomType, PricePerNight from Rooms 
WHERE Available = 1
--5.	Retrieve names of participants registered for a specific hotel event using an @EventID parameter.
DECLARE @EventID INT = 2
select ParticipantName from EventParticipants where EventID = @EventID

--6.	Create a stored procedure that allows a hotel to update its information (name and location) in the "Hotels" table.
CREATE PROCEDURE UpdateHotel
@HotelID INT,
@NewName varchar(75),
@NewLocation varchar(75)
As
Begin
Update Hotels set Name=@NewName,Location=@NewLocation
where HotelID=@HotelID
END
Exec UpdateHotel 1,'Taj Mahal','Mumbai'

--7.	Write an SQL query to calculate the total revenue generated by each hotel from confirmed bookings.
select H.HotelID, H.Name, SUM(B.TotalAmount) AS TotalRevenue
from Hotels H JOIN Rooms R ON H.HotelID = R.HotelID 
JOIN Bookings B ON R.RoomID = B.RoomID 
where B.Status = 'Confirmed' GROUP BY H.HotelID, H.Name

--8.	Find rooms that have never been booked by selecting their details from the Rooms table.
select R.* from Rooms R LEFT JOIN Bookings B ON R.RoomID = B.RoomID
where B.RoomID IS NULL

--9.	Retrieve total payments per month and year, ensuring missing months are handled properly.

WITH MonthTable AS (
    SELECT DISTINCT YEAR(PaymentDate) AS Year, MONTH(PaymentDate) AS Month
    FROM Payments
)
SELECT 
    mt.Year, mt.Month, 
    COALESCE(SUM(p.AmountPaid), 0) AS TotalPayments
FROM MonthTable mt
LEFT JOIN Payments p 
    ON YEAR(p.PaymentDate) = mt.Year AND MONTH(p.PaymentDate) = mt.Month
GROUP BY mt.Year, mt.Month
ORDER BY mt.Year DESC, mt.Month DESC;

--10.	Retrieve a list of room types that are either priced between $50 and $150 per night or above $300 per night.
select distinct RoomType from Rooms where PricePerNight BETWEEN 50 AND 150 OR PricePerNight > 300;
--11.	Retrieve rooms along with their guests, including only rooms that are currently occupied.

select R.RoomID, R.RoomNumber, R.RoomType, R.PricePerNight, G.FullName AS GuestName
from Rooms R JOIN Bookings B ON R.RoomID = B.RoomID
JOIN Guests G ON B.GuestID = G.GuestID
where GETDATE() BETWEEN G.CheckInDate AND G.CheckOutDate

--12.	Find the total number of participants in events held in a specific city (@CityName).

DECLARE @CityName VARCHAR(50) = 'Chennai'; 
select COUNT(EP.ParticipantID) AS TotalParticipants
from EventParticipants EP JOIN Events E ON EP.EventID = E.EventID
JOIN Hotels H ON H.HotelID = H.HotelID
WHERE H.Location = @CityName;

--13.	Retrieve a list of unique room types available in a specific hotel.
SELECT DISTINCT RoomType FROM Rooms WHERE HotelID = 3;
--14.	Find guests who have never made a booking from the hotel management system.
select g.GuestID, g.FullName from Guests g
LEFT JOIN Bookings b ON g.GuestID = b.GuestID where b.GuestID IS NULL;

--15.	Retrieve names of all booked rooms along with the guests who booked them.
select R.RoomNumber, R.RoomType, G.FullName AS GuestName
from Rooms R
JOIN Bookings B ON R.RoomID = B.RoomID
JOIN Guests G ON B.GuestID = G.GuestID;

--16.	Retrieve all hotels along with the count of available rooms in each hotel.
SELECT h.HotelID, h.Name AS HotelName, COUNT(r.RoomID) AS AvailableRooms
FROM Hotels h
LEFT JOIN Rooms r ON h.HotelID = r.HotelID AND r.Available = 1
GROUP BY h.HotelID, h.Name;

--17.	Find pairs of rooms from the same hotel that belong to the same room type.
SELECT r1.RoomID AS Room1, r2.RoomID AS Room2, r1.HotelID, r1.RoomType
FROM Rooms r1
JOIN Rooms r2 ON r1.HotelID = r2.HotelID 
              AND r1.RoomType = r2.RoomType 
              AND r1.RoomID < r2.RoomID
ORDER BY r1.HotelID, r1.RoomType;

--18.	List all possible combinations of hotels and events.
select h.Name AS HotelName, e.EventName from Hotels h
CROSS JOIN Events e;

--19.	Determine the hotel with the highest number of bookings.

select TOP 1 h.Name,Count(b.Roomid) as Total_Bookings from Hotels h left join Rooms r on h.HotelId=r.HotelId join Bookings b on 
b.RoomId=r.RoomId group by h.Name ORDER BY Total_Bookings DESC




